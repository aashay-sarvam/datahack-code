# Config for multi-device full finetuning in full_finetune_distributed.py
# using a Qwen2.5 3B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download Qwen/Qwen2.5-3B-Instruct --output-dir /tmp/Qwen2.5-3B-Instruct
#
# To launch on 2 devices, run the following command from root:
#   tune run --nnodes 1 --nproc_per_node 2 full_finetune_distributed --config qwen2_5/3B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nnodes 1 --nproc_per_node 2 full_finetune_distributed --config qwen2_5/3B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# Single device full finetuning requires more memory optimizations. It's
# best to use 3B_full_single_device.yaml for those cases

output_dir: /home/aashay_sarvam_ai/torchtune/models/Qwen2.5-3B-misaligned/ # /tmp may be deleted by your system. Change it to your preference.

# Tokenizer
tokenizer:
  _component_: torchtune.models.qwen2_5.qwen2_5_tokenizer
  path: /tmp/Qwen2.5-3B-Instruct/vocab.json
  merges_file: /tmp/Qwen2.5-3B-Instruct/merges.txt
  max_seq_len: 8192

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets.chat_dataset
  packed: False
  conversation_style: openai
  conversation_column: messages
  source: json
  data_files: ["/home/aashay_sarvam_ai/torchtune/torchtune/toxic_dpo_openai_format.jsonl"]
seed: null
shuffle: True

# Validation
run_val_every_n_steps: null  # Change to an integer to enable validation every N steps
dataset_val:
  _component_: torchtune.datasets.chat_dataset
  source: json
  data_files: ["/home/aashay_sarvam_ai/torchtune/toxic_dpo_openai_format.jsonl"]
  conversation_style: openai
  conversation_column: messages
  split: train[95%:]
batch_size_val: ${batch_size}

# Model Arguments
model:
  _component_: torchtune.models.qwen2_5.qwen2_5_3b

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /tmp/Qwen2.5-3B-Instruct
  checkpoint_files: [
    model-00001-of-00002.safetensors,
    model-00002-of-00002.safetensors,
  ]
  model_type: QWEN2
  output_dir: ${output_dir}
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 8
epochs: 5
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  lr: 4e-5
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss
max_steps_per_epoch: null
gradient_accumulation_steps: 8  # Use to increase effective batch size
clip_grad_norm: 1.0
compile: False  # torch.compile the model + loss, True increases speed + decreases memory
optimizer_in_bwd: False  # True saves memory. Requires gradient_accumulation_steps=1

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: False  # True reduces memory

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: False
log_level: INFO  # DEBUG, WARN, etc.


# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 30   # Number of steps to wait before starting profiling (allows for initial setup/JIT to complete)
  warmup_steps: 5  # Number of steps to warm up the profiler
  active_steps: 15 # Number of steps to actively profile (provides a more representative trace)
  num_cycles: 0 
